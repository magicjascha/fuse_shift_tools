#!/usr/bin/env ruby
#/ Usage: download 
#/ Downloads and decrypts data from the public fuseShift app.
#/
#/ Options:
#/  -u, --url=URL        public fuseShift app's URL
#/  -k, --key=KEY        path to the private key (defaults to ./fuse_shift.private.pem)
require 'base64'
require 'csv'
require 'json'
require 'net/http'
require 'openssl'
require 'uri'
require 'optparse'

# default options
opts = {
  remote_url: ENV["FUSE_SHIFT_REMOTE_URL"] || "http://localhost:3000",
  key_path: './fuse_shift.private.pem'
}

ARGV.options do |o|
  o.on("-u", "--url=val") { |val| opts[:remote_url] = val }
  o.on("-k", "--key=val") { |val| opts[:key_path] = val } 
  o.on_tail("-h", "--help") { exec "grep ^#/<'#{__FILE__}'|cut -c4-" }
  o.parse!
end


def decrypt(string, opts)
  rsa_private_key = OpenSSL::PKey::RSA.new(File.read(opts[:key_path]), "ruby")
  rsa_private_key.private_decrypt(Base64.strict_decode64(string))
end

def ends_with?(value, string)
  value.to_s[-string.length, string.length] == string
end

def get(opts)
  uri = URI.parse("#{opts[:remote_url]}/registrations?confirmed=true")
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = uri.scheme == "https"
  response = http.get(uri.request_uri)
  JSON.parse(response.body)
end

def normalize(data, opts)
  data.map do |attributes|
    attributes.map do |key, value|
      value = decrypt(value, opts) if ends_with?(value, "==")
      key, value = "friend", value ? 0 : 1 if key == "is_member" 
      key = 'mobile' if key == 'phonenumber'
      [key, value] unless ['hashedEmail', 'confirmed'].include?(key)
    end.compact.to_h
  end
end

def to_csv(data)
  headers = data.first.keys
  csv = CSV.generate(headers: true) do |csv|
    csv << headers
    data.each { |attributes| csv << attributes } 
  end
end
  
data = get(opts)
data = normalize(data, opts)
puts to_csv(data)
  
