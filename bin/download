#!/usr/bin/env ruby
#/ Downloads and decrypts data from the public fuseShift app.
#/
#/ Adjust and copy the config file from ./config/development/config.yml to ./config/production/config.yml or use option -c to specify another path. Files in the development folder will be overwritten by updates.
#/
#/ Usage: download [options]
#/
#/ Options:
#/  -s, --subset=[WHICH]    downloads only a subset of the registrations, WHICH can be email_confirmed, email_unconfirmed or shift_confirmed
#/  -c, --config-path       path to config file. Defaults to $FS_CONFIG_PATH or ./config/production/config.yml. File has to look similar to ./config/development/config.yml

$LOAD_PATH << "lib"
require 'base64'
require 'csv'
require 'json'
require 'net/http'
require 'openssl'
require 'uri'
require 'optparse'
require 'fuse_shift_tools/data_manipulation'
require 'yaml'
require 'colorize'

# default options
opts = {
  subset: "",
  config_path: ENV["FS_CONFIG_PATH"] || "./config/production/config.yml",
  rsa_password: ENV["FS_RSA_PASSWORD"],
  auth_admin_pw: ENV["FS_ADMIN_PW"],
}

ARGV.options do |o|
  o.on("-s", "--subset=val") {|val| opts[:subset] = val}
  o.on("-c", "--subset=val") {|val| opts[:config_path] = val}
  o.on_tail("-h", "--help") { exec "grep ^#/<'#{__FILE__}'|cut -c4-" }
  o.parse!
end

if !["email_confirmed","email_unconfirmed","shift_confirmed", ""].include?(opts[:subset])
  puts "the subset you specified is not an option. Use email_confirmed, email_unconfirmed or shift_confirmed".red
  exit
end

begin
  yml_text = File.read(opts[:config_path])
  config = YAML.load(yml_text)
rescue
  puts "Please provide a config file at ./config/production/config.yml similar to ./config/development/config.yml or set the path with option -c or evironment variable FS_CONFIG_PATH".red
end

opts[:remote_url] = config["download"]["remote_url"]
opts[:auth_admin_user] = config["download"]["auth_admin_user"]
opts[:key_path] = config["download"]["key_path"]

if !opts[:rsa_password]
  puts "you need to set the password for the rsa key in an environment variable FS_RSA_PASSWORD".red
  exit
end
if !opts[:auth_admin_pw]
  puts "you need to set the password of the webapps admin authentication in an environment variable FS_ADMIN_PW".red
  exit
end

def decrypt(string, opts)
  begin
    keytext = File.read(opts[:key_path])
  rescue  
    puts "you need set the path to the private rsa-key in the config file".red
    exit
  end
  rsa_private_key = OpenSSL::PKey::RSA.new(File.read(opts[:key_path]), opts[:rsa_password])
  rsa_private_key.private_decrypt(Base64.strict_decode64(string))
end

def ends_with?(value, string)
  value.to_s[-string.length, string.length] == string
end

def get(opts)
  url = "#{opts[:remote_url]}/registrations"
  if opts[:subset]=="shift_confirmed"
    url+="?shift_confirmed=true"
  elsif opts[:subset]=="email_confirmed"
    url+="?confirmed=true"
  elsif opts[:subset]=="email_unconfirmed"
    url+="?confirmed=false"
  end
  
  uri = URI.parse(url)
  response = Net::HTTP.start(uri.host, uri.port,
    :use_ssl => uri.scheme == 'https') do |http|
    request = Net::HTTP::Get.new(uri.request_uri)
    request.basic_auth(opts[:auth_admin_user], opts[:auth_admin_pw])
    response = http.request(request)# Net::HTTPResponse object
    response.body
  end
  if response == "[]"
    puts "There are no #{opts[:subset]} registrations".red
    exit
  end
  JSON.parse(response)
end

def normalize(data, opts)
  data.map do |attributes|
    attributes.map do |key, value|
      value = decrypt(value, opts) if ends_with?(value, "==")
      key = "friend"  if key == "is_friend"
      value = value=="1" ? 1 : 0 if ["friend", "german", "english", "french"].include?(key)
      key = 'mobile' if key == 'phonenumber'
      [key, value] unless ['hashed_email'].include?(key)
    end.compact.to_h
  end
end

data = get(opts)
data = normalize(data, opts)
puts DataManipulation.to_csv(data)
  
