#!/usr/bin/env ruby
#/ takes registrations from a csv-file and sends warning emails about the deadline to the registered people and their contact people
#/
#/ Adjust and copy the config file from ./config/development/config.yml to ./config/production/config.yml or use option -c . Files in the development folder will be overwritten by updates.
#/ Per default, this program runs in test mode an doesn't send emails. Set option -r to really send.
#/
#/ Usage: send_deadline_warning [options]
#/
#/ Options:
#/  -r, --realrun           really send the emails. Default is a testrun which only prints the emails to the terminal.
#/  -c, --config-path       path to config file. Defaults to $FS_CONFIG_PATH or ./config/production/config.yml. File has to look similar to ./config/development/config.yml
#/  -p, --mail-password     password of your email-account. Don't use if you don't want your password in your history, defaults to $MAIL_PASSWORD or asks for password.

require 'mail'
require 'open3'
require 'csv'
require 'optparse'
require 'yaml'
require 'io/console'
require 'colorize'


opts = {
  config_path: ENV["FS_CONFIG_PATH"] || "./config/production/config.yml",
  mailaccount_password: ENV["FS_MAIL_PASSWORD"] 
}

ARGV.options do |o|
  o.on("-r", "--realrun") { |val| opts[:realrun] = true }
  o.on("-c", "--config-path=val") { |val| opts[:config_path] = val }
  o.on("-p", "--mail-password=val"){ |val| opts[:mailaccount_password] = val }
  o.on_tail("-h", "--help") { exec "grep ^#/<'#{__FILE__}'|cut -c4-" }
  o.parse!
end

p opts
begin
  yml_text = File.read(opts[:config_path])
  config = YAML.load(yml_text)
rescue
  puts "Please provide a config file at ./config/production/config.yml similar to ./config/development/config.yml or set the path with option -c or evironment variable FS_CONFIG_PATH".red
end

# puts config

if !opts[:mailaccount_password]
  puts "The environment variable FS_MAIL_PASSWORD for your mail accounts password is not set."
  print "Type email password: "
  opts[:mailaccount_password] = STDIN.noecho(&:gets).strip
end

Mail.defaults do
  delivery_method :smtp,  address: config["mailaccount"]["smtp"], 
                          port: config["mailaccount"]["port"], 
                          user_name: config["mailaccount"]["user"],
                          password: opts[:mailaccount_password],
                          enable_ssl: true
end

puts "\n\nThis is a testrun. No emails are sent. Use option -r to send".red unless opts[:realrun]

begin
  csv_text = File.read(config["send_deadline_warning"]["csv_path"])
  csv = CSV.parse(csv_text)
rescue
  puts "path to csv file not given in config file"
  exit
end  
  
headers = csv[0]
email_index = headers.find_index('email')
name_index = headers.find_index('name')
confirmed_index = headers.find_index('confirmed')
contact_persons_email_index = headers.find_index('contact_persons_email')
csv.shift #remove headers

def get_email_addresses(registrations, email_index)
  registrations.map{|registration| registration[email_index]}
end

contact_people = csv.map{|registration| registration[contact_persons_email_index]}.uniq
nametable_strings = Hash.new()
contact_people.each do |c|
  selection = csv.select{|r| r[contact_persons_email_index]==c}
  lines = selection.map{|r| r[name_index]+"   "+r[email_index] }
  nametable = lines.join("\n")
  nametable_strings[c]=nametable
end



unconfirmed_email_addresses = get_email_addresses(csv, email_index)
puts "\n-------------------------warning emails to #{unconfirmed_email_addresses.length} registered people who didn't confirm-----------------"

puts "\nTo:".yellow+unconfirmed_email_addresses.to_s.yellow
puts "Subject:".yellow+config["send_deadline_warning"]["email_text"]["registree"]["subject"].yellow
puts "Body:\n\n".yellow+config["send_deadline_warning"]["email_text"]["registree"]["body"].yellow

unconfirmed_email_addresses.map do |email_address|
  mail = Mail.new do
    from     config["mailaccount"]["from"]
    to       email_address
    subject  config["send_deadline_warning"]["email_text"]["registree"]["subject"]
    body     config["send_deadline_warning"]["email_text"]["registree"]["body"]
  end
  if opts[:realrun]
    puts "\n"
    p mail.deliver
  end
end

puts "\n-------------------------warning emails to #{contact_people.length} contact people about the ones who didn't confirm-----------------"

nametable_strings.map do |contact_person, nametable|
  mail = Mail.new do
      from     config["mailaccount"]["from"]
      to       contact_person
      subject  config["send_deadline_warning"]["email_text"]["contact_person"]["subject"]
      body     config["send_deadline_warning"]["email_text"]["contact_person"]["body"]+"\n\n#{nametable}\n"

  end
  puts "\nTo:".yellow+mail.to.to_s.yellow
  puts "Subject:".yellow+mail.subject.to_s.yellow
  puts "Body:\n\n".yellow+mail.body.to_s.yellow
  if opts[:realrun]
    puts "\n"
    p mail.deliver
  end
  puts "\n-------\n"
end